services:
  read:
    image: grafana/loki:3.1.0
    command: "-config.file=/etc/loki/config.yaml -target=read"
    ports:
      - 3101:3100
      - 7946
      - 9095
    volumes:
      - ../observability/loki/loki-config.yaml:/etc/loki/config.yaml
    depends_on:
      - minio
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks: &loki-dns
      host:
        aliases:
          - loki

  write:
    image: grafana/loki:3.1.0
    command: "-config.file=/etc/loki/config.yaml -target=write"
    ports:
      - 3102:3100
      - 7946
      - 9095
    volumes:
      - ../observability/loki/loki-config.yaml:/etc/loki/config.yaml
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      - minio
    networks:
      <<: *loki-dns

  alloy:
    image: grafana/alloy:latest
    volumes:
      - ../observability/alloy/alloy-local-config.yaml:/etc/alloy/config.alloy:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: run --server.http.listen-addr=0.0.0.0:12345 --storage.path=/var/lib/alloy/data /etc/alloy/config.alloy
    ports:
      - 12345:12345
    depends_on:
      - gateway
    networks:
      - host

  minio:
    image: minio/minio
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /data/loki-data && \
        mkdir -p /data/loki-ruler && \
        minio server /data
    environment:
      - MINIO_ROOT_USER=loki
      - MINIO_ROOT_PASSWORD=supersecret
      - MINIO_PROMETHEUS_AUTH_TYPE=public
      - MINIO_UPDATE=off
    ports:
      - 9000
    volumes:
      - ./.data/minio:/data
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 15s
      timeout: 20s
      retries: 5
    networks:
      - host

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ../observability/prometheus/prometheus-config.yml:/etc/prometheus/prometheus.yml
    ports:
      - 9090:9090
    networks:
      - host

  tempo:
    image: grafana/tempo
    container_name: tempo
    command: -config.file /etc/tempo-config.yml
    ports:
      - 3110:3100
      - 4317:4317
    volumes:
      - ../observability/tempo/tempo-config.yml:/etc/tempo-config.yml
    networks:
      - host

  grafana:
    image: grafana/grafana:latest
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    depends_on:
      - gateway
    entrypoint:
      - sh
      - -euc
      - |
        /run.sh
    ports:
      - "3000:3000"
    volumes:
      -  ../observability/grafana/datasource/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - host

  backend:
    image: grafana/loki:3.1.0
    volumes:
      - ../observability/loki/loki-config.yaml:/etc/loki/config.yaml
    ports:
      - "3100"
      - "7946"
    command: "-config.file=/etc/loki/config.yaml -target=backend -legacy-read-mode=false"
    depends_on:
      - gateway
    networks:
      - host


  gateway:
    image: nginx:latest
    depends_on:
      - read
      - write
    entrypoint:
      - sh
      - -euc
      - |
        cat <<EOF > /etc/nginx/nginx.conf
        user  nginx;
        worker_processes  5;  ## Default: 1

        events {
          worker_connections   1000;
        }

        http {
          resolver 127.0.0.11;

          server {
            listen             3100;

            location = / {
              return 200 'OK';
              auth_basic off;
            }

            location = /api/prom/push {
              proxy_pass       http://write:3100\$$request_uri;
            }

            location = /api/prom/tail {
              proxy_pass       http://read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }

            location ~ /api/prom/.* {
              proxy_pass       http://read:3100\$$request_uri;
            }

            location = /loki/api/v1/push {
              proxy_pass       http://write:3100\$$request_uri;
            }

            location = /loki/api/v1/tail {
              proxy_pass       http://read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }

            location ~ /loki/api/.* {
              proxy_pass       http://read:3100\$$request_uri;
            }
          }
        }
        EOF
        /docker-entrypoint.sh nginx -g "daemon off;"
    ports:
      - "3100:3100"
    healthcheck:
      test: [ "CMD", "service", "nginx", "status" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - host

  configserver:
    container_name: test1-config
    image: ghoshbishal/test1-config:latest
    ports:
      - 8070:8070
    healthcheck:
      test: curl http://configserver:8070/actuator/health/readiness | grep "UP" || exit 1
      retries: 20
      interval: 20s
      timeout: 5s
      start_period: 5s
    environment:
      SPRING_APPLICATION_NAME: test1-config
      OTEL_SERVICE_NAME: configserver
    extends:
      file: common-config.yml
      service: common_service
    networks:
      - host

  eurekaserver:
    container_name: eurekaserver
    image: ghoshbishal/eureka-server:latest
    ports:
      - 8090:8090
    healthcheck:
      test: curl http://eurekaserver:8090/actuator/health/readiness | grep UP || exit 1
      retries: 20
      interval: 20s
      timeout: 5s
      start_period: 5s
    environment:
      SPRING_APPLICATION_NAME: eurekaserver
      OTEL_SERVICE_NAME: eurekaserver
    extends:
      file: common-config.yml
      service: service-common-config
    depends_on:
      configserver:
        condition: service_healthy
    networks:
      - host

  test1:
    container_name: test1
    image: ghoshbishal/test1:latest
    ports:
      - 8080:8080
    healthcheck:
      test: curl http://test1:8080/actuator/health/readiness | grep UP || exit 1
      retries: 20
      interval: 20s
      timeout: 5s
      start_period: 5s
    extends:
      file: common-config.yml
      service: micro-service_common
    environment:
      SPRING_APPLICATION_NAME: test1
      OTEL_SERVICE_NAME: test1
    depends_on:
      eurekaserver:
        condition: service_healthy
    networks:
      - host

  test2:
    container_name: test2
    image: ghoshbishal/test2:latest
    ports:
      - 8081:8081
    healthcheck:
      test: curl http://test2:8081/actuator/health/readiness | grep UP || exit 1
      retries: 20
      interval: 20s
      timeout: 5s
      start_period: 5s
    environment:
      SERVER_PORT: 8081
      SPRING_APPLICATION_NAME: test2
      OTEL_SERVICE_NAME: test2
    extends:
      file: common-config.yml
      service: micro-service_common
    depends_on:
      eurekaserver:
        condition: service_healthy
    networks:
      - host

  gatewayserver:
    container_name: gatewayserver
    image: ghoshbishal/gatewayserver:latest
    environment:
      SPRING_APPLICATION_NAME: gatewayserver
      OTEL_SERVICE_NAME: gatewayserver
    ports:
      - 8060:8060
    extends:
      file: common-config.yml
      service: service-common-config
    depends_on:
      test1:
        condition: service_healthy
      test2:
        condition: service_healthy
    networks:
      - host


networks:
  host:
    driver: bridge